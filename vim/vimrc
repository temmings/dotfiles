" vim:set fenc=utf8 ff=unix ts=8 sts=2 sw=2 tw=0 fdm=marker:
scriptencoding utf-8
set nocompatible               " be iMproved
filetype off                   " required!

""" prepare basic: {{{
let s:on_windows = has('win95') || has('win16') || has('win32') || has('win64')

let $DOTVIM = expand('~/.vim')
" 見せられないよ！
let $MYSHADOWVIMRC = expand('~/.vimrc.shadow')
" ローカル設定 (.vimrc 末尾で読み込み)
let $MYLOCALVIMRC = expand('~/.vimrc.local')

function! s:source_if_exist(file)
  if filereadable(a:file)
    execute "source " . a:file
  endif
endfunction

call s:source_if_exist($MYSHADOWVIMRC)
""" }}}

""" prepare neobundle: {{{
if s:on_windows
  set shellslash
endif

if has('vim_starting')
  " $ git clone git://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim
  set runtimepath+=$DOTVIM/bundle/neobundle.vim/
endif

" * github  : NeoBundle '<username>/<scriptname>'
" * vim.org : NeoBundle '<scriptname>'
" * other   : NeoBundle 'git://<fqdn>/<scriptname>.git'
let s:bundle_plugin_dir = expand('$DOTVIM/bundle')
""" }}}

""" prepare plugins: {{{
call neobundle#begin(s:bundle_plugin_dir)

NeoBundleFetch 'Shougo/neobundle.vim'

" 各種プラグインなどのまとまった設定を読み込み
for rc in split(globpath('$DOTVIM/conf.d/', '*.vim'), '\n')
  execute "source " . rc
endfor

""" testing: {{{
NeoBundle 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
" 再帰的に .git を探すようなので、ファイルシステムによってはめっちゃ重い？
"NeoBundle 'tpope/vim-fugitive'
"NeoBundle 'rizzatti/dash.vim'

NeoBundle 'fsharp/vim-fsharp', {
           \ 'description': 'F# support for Vim',
           \ 'lazy': 1,
           \ 'autoload': {'filetypes': 'fsharp'},
           \ 'build': {
           \   'unix':  'make fsautocomplete',
           \ },
           \ 'build_commands': ['curl', 'make', 'mozroots', 'touch', 'unzip'],
           \}

"NeoBundle 'haya14busa/vim-migemo'
"NeoBundle 'rhysd/migemo-search.vim'
NeoBundle 'surround.vim'
"if executable('cmigemo')
"  cnoremap <expr><CR> migemosearch#replace_search_word()."\<CR>"
"endif
" migemo 検索テスト用
"local: ローカル
"indent: インデント
""" }}}

":Restart" で gvim を再起動
NeoBundleLazy 'tyru/restart.vim', {
      \ 'gui': 1,
      \ 'autoload': {
      \  'commands': 'Restart'
      \ }}

":Capture <command>" で command windows への出力をバッファに取り込む
NeoBundleLazy 'tyru/capture.vim', {
      \ 'autoload': {
      \  'commands': 'Capture'
      \ }}

":PP <Variable>"
"NeoBundle 'thinca/vim-prettyprint'

" バッファを Vim Script として評価
":Batch" : 現在行を評価
":'<,'>Batch" : 選択行を評価
NeoBundleLazy 'vim-scripts/batch.vim', {'autoload': {'commands': 'Batch'}}

" ctags, <cword>, 任意の文字列をハイライト
"NeoBundle 't9md/vim-quickhl'

NeoBundle 'thinca/vim-ref'

" Ex command 差し替え
NeoBundle 'tyru/vim-altercmd'

" emacs keybind for command line.
"   * <C-O> : prefix to original keybind
NeoBundle 'houtsnip/vim-emacscommandline'

""" use \\[fFtT]{char} or \\[wWbBeEjknN] or \\g[eE]
"NeoBundle 'Lokaltog/vim-easymotion'

" MixedCase (crm), camelCase (crc), snake_case (crs), and UPPER_CASE (cru)
"NeoBundle 'tpope/vim-abolish'

" search string from visual mode.
"NeoBundle 'thinca/vim-visualstar'

"NeoBundle 'yuratomo/w3m.vim'
"let g:w3m#command = 'C:\Cygwin\bin\w3m.exe'

"NeoBundle 'mattn/webapi-vim'

NeoBundle 'junegunn/vim-easy-align'
vnoremap <silent> <Enter> :EasyAlign<cr>

call neobundle#end()

filetype plugin indent on

" Plugin installation check.
NeoBundleCheck

call altercmd#load()
" require: conf.d/bufferWipeoutInteractive
AlterCommand q[uit] call BufferWipeoutInteractive()

""" prepare plugins: }}}

" Vim config: {{{
set notitle
set modeline modelines=5

set helplang=ja,en

" no error bells
set novisualbell t_vb=
set noerrorbells

set hidden
set noautowrite
set noautowriteall

" imput method
set iminsert=0
set imsearch=0

set noignorecase
set smartcase
set noincsearch
set hlsearch            " 検索文字をハイライト
set wrapscan            " 検索時にファイルの最後まで行ったら最初に戻る

set tabstop=8
set shiftwidth=4
set softtabstop=4
set expandtab           " indent tab をスペースに展開
set noautoindent
set smartindent
set backspace=indent,eol,start

set wildmenu            " コマンドライン補完するときに強化されたものを使う

set number              " 行番号表示
if exists('&relativenumber')
  set relativenumber    " 相対行番号表示
endif
set ruler
set list                " タブ・改行表示
" タブや改行の表現方法
set listchars=tab:\|\ ,nbsp:&,trail:-,precedes:*,extends:*,eol:\ 
set scrolloff=5
set foldmethod=syntax
set foldlevel=1
let sh_fold_enabled = 1
let php_folding = 1
let perl_fold = 1
let perl_extented_vars = 1
let perl_sync_dist = 250
let xml_syntax_folding = 1

"set foldtext=s:myfoldtext()
"function! s:myfoldtext()
"  let line = getline(v:foldstart)
"  let sub = substitute(line, '/\*\|\*/\|{{{\d\=', '', 'g')
"  return sub
"endfunction

" for snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" 'o', 'O' で行作成時コメントアウトしない
autocmd FileType * setlocal formatoptions-=o
set formatoptions+=mM   " テキスト挿入中の自動折り返しを日本語に対応させる
set wrap                " 長い行を折り返して表示
set linebreak
" 折り返し時に行頭に付与する文字列
"set showbreak=..
set showbreak=

""" Vim breakindent patch: https://retracile.net/wiki/VimBreakIndent
if exists('&breakindent')
  set breakindent
endif

" 行頭・行末越えを許可する操作
" Normal and Visual:
"   b: <BS>, s: <Space>,
"   h: "h",  l: "l",
"   <: <Left>, >: <Right>,
" Normal: ~: "~",
" Insert and Replace: [: <Left>, ]: <Right>
set whichwrap=b,s,h,l,<,>,[,]

set cmdheight=2
set laststatus=2        " 常にステータス行を表示
set showcmd             " コマンドをステータス行に表示
set showtabline=2       " 常にタブを表示

set noswapfile
set directory-=. " no create on current
set updatecount=0
set swapsync=fsync

set nobackup
set backupdir=$DOTVIM/backup
set nowritebackup
set backupcopy=yes

set history=100
"set viminfo='100,<100,:10000,/100,s10,h,%,c,n~/.viminfo
set viminfo='100,<100,:10000,/100,s10,h,c,n~/.viminfo

if has('persistent_undo')
  set undofile
  set undodir=$DOTVIM/undo
  set undolevels=1000
  set undoreload=10000
endif

set tags=tags,~/tags

set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,ucs-bom,cp932,euc-jp,iso-2022-jp
set fileformat=unix
set fileformats=unix,dos

set showmatch           " 括弧入力時に対応する括弧を表示
set ambiwidth=double

"set clipboard+=unnamed
set nrformats-=octal
set virtualedit=block
set display+=lastline

" キーコードやマッピングされたキー列が完了するのを待つ時間(ミリ秒)
set timeout timeoutlen=1000 ttimeoutlen=100
" }}}

"現バッファの差分表示(変更箇所の表示)
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis
"ファイルまたはバッファ番号を指定して差分表示。#なら裏バッファと比較
command! -nargs=? -complete=file Diff if '<args>'=='' | browse vertical diffsplit|else| vertical diffsplit <args>|endif

" {{{ change current directory of buffer
augroup lcd_buffer_dir_autocmd
  autocmd!
  autocmd BufEnter * if isdirectory(expand('%:p:h')) | lcd %:p:h | endif
augroup END
" }}}

" key mappings: {{{
" - key mappings overview {{{
" commands:           modes:
"         Normal  Visual+Select  Operator-pending
" :map      yes        yes            yes
" :nmap     yes         -              -
" :vmap      -         yes             -
" :omap      -          -             yes
"
"         Visual    Select
" :vmap     yes      yes
" :xmap     yes       -
" :smap      -       yes
"
"         Insert  Command-line  Lang-Arg
" :map!     yes        yes         -
" :imap     yes         -          -
" :cmap      -         yes         -
" :lmap     yes*       yes*       yes*
" }}}

nnoremap ; :

nnoremap gj j
nnoremap gk k
nnoremap j gj
nnoremap k gk

" 選択範囲のinc/dec後に範囲選択したままにする
vnoremap <C-a> <C-a>gv
vnoremap <C-x> <C-x>gv
vnoremap g<C-a> g<C-a>gv
vnoremap g<C-x> g<C-x>gv

" Ctrl-C で選択範囲をクリップボードへコピー
vnoremap <C-c> "*y
" Ctrl-C で単語をクリップボードへコピー
nnoremap <C-c> "*yiw

"l を <Right>に置き換えても、折りたたみを l で開くことができるようにする
"if has('folding')
"  nnoremap <expr> l foldlevel(line('.')) ? "\<Right>zo" : "\<Right>"
"endif

" append empty line.
nnoremap <S-Enter> O<Esc>
nnoremap <Enter> o<Esc>

" 間違えやすいキーを潰したり入れ替えたり
nnoremap Q gq
nnoremap ZQ <Nop>
nnoremap ZZ <Nop>

" Esc*2 or C-g でハイライト消す
nnoremap <silent> <C-g> :<C-u>nohlsearch<CR><C-g>
nnoremap <silent> <Esc><Esc> :<C-u>nohlsearch<CR>

inoremap <C-g> <Esc>
cnoremap <C-g> <Esc>

"nnoremap [C-c] <Nop>
"nmap <C-c> [C-c]
"nnoremap <silent> [C-c]<C-c> :<C-u>execute '!' &l:filetype '%'<CR>

"nnoremap [C-x] <Nop>
"nmap <C-x> [C-x]
"nnoremap <silent> [C-x]k :<C-u>call BufferWipeoutInteractive()<CR>
"nnoremap <silent> [C-x]s :<C-u>write<CR>
"nnoremap <silent> [C-x]<C-s> :<C-u>write<CR>

map [misc] <Nop>
map <Space> [misc]
noremap <silent> [misc]e :Batch<CR>
nnoremap [misc]E :<C-u>source %<CR>
"nmap [misc]j <Plug>(quickhl-cword-toggle)
"nmap [misc]] <Plug>(quickhl-tag-toggle)
"nmap [misc]m <Plug>(quickhl-manual-this)
"nmap [misc]M <Plug>(quickhl-manual-reset)
"xmap [misc]m <Plug>(quickhl-manual-this)
"xmap [misc]M <Plug>(quickhl-manual-reset)
nnoremap [misc]n :<C-u>cn<CR>
nnoremap [misc]p :<C-u>cp<CR>
" スペルチェックをトグル。
" z=: 正しいスペルの候補を表示・選択
" ]s: next / [s: prev
nnoremap <silent> [misc]s :<C-u>setlocal spell! spelllang=en_us<CR>:setlocal spell?<CR>
nnoremap [misc]w :<C-u>set wrap! wrap?<CR>
nnoremap [misc]/ *
"map H <Plug>(operator-quickhl-manual-this-motion)

" }}}

" enable syntax color: {{{
set t_Co=256
set nocursorline    " cursorline は描画重い
set synmaxcol=2000  " syntax を適用する最大カラム数
set background=dark
silent! colorscheme torte
syntax on
"silent! colorscheme solarized
"syntax on
" force background to black
"hi Normal guibg=#000000
"hi Normal guifg=#888888
"hi CursorLine guibg=#262626
" }}}

call s:source_if_exist($MYLOCALVIMRC)
