# -*- coding: utf-8 -*-
# vim:ts=4 foldmethod=marker

### on exec
## 1: /etc/zshenv
## 2: ~/.zshenv
## if login shell; then
##   3: /etc/zprofile
##   4: ~/.zprofile
## fi
## if interactive shell; then
## 5: /etc/zshrc
## 6: ~/.zshrc
## fi
## if login shell; then
## 7: /etc/zlogin
## 8: ~/.zlogin
## fi

### on logout
## 1: ~/.zlogout
## 2: /etc/zlogout

### functions {{{

### http://qiita.com/mollifier/items/160a13a95e9627a55750
function 256colortest() {
    local code
    for code in {000..255}; echo -n -e "\e[38;05;${code}m $code"
}

function set_screen_caption() {
    # set program name to screen caption
    [ -n "$STY" ] && echo -ne "\ek$1\e\\"
}

function mkcdir() {
    mkdir "$@" || return $?

    local arg got_end_option=0
    for arg in "$@"; do
        case "$arg" in
            --)
                got_end_option=1
                continue
                ;;
            -*)
                ((1 == $got_end_option)) && break
                continue
                ;;
            *)
                break
                ;;
        esac
    done
    cd -- "$arg"
}

### base: https://github.com/mooz/percol#zsh-history-search
if is_executable percol; then
    function percol_select_history() {
        local tac
        tac=$(get_executable_first "gtac" "tac") || tac="tail -r"
        BUFFER=$(fc -l -n 1 | eval $tac | percol --query "$LBUFFER" | sed 's/\\n/\n/g')
        CURSOR=$#BUFFER
        zle clear-screen
    }

    zle -N percol_select_history
fi

function configure_bootstrap() {
    #if which glibtoolize &>/dev/null; then
    #    glibtoolize --force
    #else
    #    libtoolize --force
    #fi
    aclocal && autoconf && autoheader && automake --add-missing --foreign
    #shtoolize all
}

function configure_for_home_local() {
    ./configure --prefix=$HOME/.local "$@"
}

function prepare_boot2docker() {
    boot2docker init
    boot2docker start
    $(boot2docker shellinit)
}

function prepare_anyenv() {
    local anyenv_dir=$HOME/.anyenv
    [[ -d $anyenv_dir ]] || git clone https://github.com/riywo/anyenv $anyenv_dir
    if [[ ! -d $anyenv_dir/plugins/anyenv-update ]]; then
        mkdir -p $anyenv_dir/plugins
        git clone https://github.com/znz/anyenv-update.git $anyenv_dir/plugins/anyenv-update
    fi
    export PATH="$anyenv_dir/bin:$PATH"
    eval "$(anyenv init -)"
}

function cdwork() {
    local yyyy=$(date '+%Y')
    local yyyymmdd=$(date '+%Y%m%d')
    mkcdir -p ~/${yyyy}/${yyyymmdd}
}
# }}}

# show user@host and random color.
PROMPT="%{[$[32 + $RANDOM % 5]m%}%n@%m%{[m%} %(#.#.$) "

# show current path.
RPROMPT="%{[36m%}%~%{[m%}"

# ignore ['?', '&', '/'] in word.
WORDCHARS='*_-.[]~=;!#$%^(){}<>'

HISTFILE="$HOME/.zsh-history"
HISTSIZE=100000000
SAVEHIST=100000000

# suppress the logout ^D.
IGNOREEOF=2

USE_TMUX=1

### alias {{{
alias ll="ls -l"
alias lf="ls -F"
alias la="ls -A"
alias clear2="echo -e '\026\033c'"
alias ssh="ssh -F =(cat ~/.ssh/config.local ~/.ssh/config ~/.ssh/config.global)"
alias scp="scp -F =(cat ~/.ssh/config.local ~/.ssh/config ~/.ssh/config.global)"
alias sftp="sftp -F =(cat ~/.ssh/config.local ~/.ssh/config ~/.ssh/config.global)"
alias svstatall="sudo svstat /var/service/*"
if is_executable w3mman; then
    alias man="w3mman"
    alias run-help="w3mman"
fi
if is_executable vim; then
    alias vi="vim"
fi

alias vinarise="vim -c Vinarise"

alias git-init="git init && git add -A && git commit -m 'Initialize repository'"

alias grep_nm_func_names="grep ' T _' | sed 's/.* T _//'"

alias show_my_ipv4="telnet ipv4.test-ipv6.com 79"
alias show_my_ipv6="telnet ipv6.test-ipv6.com 79"
alias show_my_external_ip="curl 'http://whatismyip.akamai.com'"

alias show_ec2_local_ipv4="curl -s 'http://169.254.169.254/latest/meta-data/local-ipv4'"
alias show_ec2_public_ipv4="curl -s 'http://169.254.169.254/latest/meta-data/public-ipv4'"

alias ssl-x509-detail="openssl x509 -text -noout -in"
alias ssl-rsa-detail="openssl rsa -text -noout -in"
alias ssl-csr-detail="openssl req -text -noout -in"
function ssl-pfx-detail() {
    openssl pkcs12 -clcerts -nokeys -in $1 | openssl x509 -text -noout
}
alias urlencode="nkf -WwMQ | tr = %"
alias urldecode="nkf -w --url-input"

alias -s exe="wine"
alias -s htm="w3m"
alias -s html="w3m"
alias -s shtml="w3m"
alias -s phar="php -f"
alias -s php="php -f"
alias -s pl="perl"
alias -s py="python"
alias -s rb="ruby"
# shbang に -eu とか指定されてても効かなくなるのでやめた
#alias -s sh="sh"
#alias -s zsh="zsh"
# }}}

if [[ x"$OSTYPE" != x"cygwin" ]]; then
    prepare_anyenv
    is_executable direnv && eval "$(direnv hook zsh)"
fi

### virtualenvwrapper for python virtualenv
#if hash virtualenvwrapper.sh 2>/dev/null; then
#    WORKON_HOME="$HOME/.virtualenvs"
#    source $(which virtualenvwrapper.sh)
#fi

binary_extension_patterns='*.(o|obj|a|so|dylib|lib|dll|com|exe|pyc|elc|hi|class|pdb)'
zstyle ':completion:*:*:'$EDITOR':*:*files' ignored-patterns $binary_extension_patterns
zstyle ':completion:*:*:'$PAGER':*:*files' ignored-patterns $binary_extension_patterns
zstyle ':completion:*:*:'view':*:*files' ignored-patterns $binary_extension_patterns

zstyle ':completion:*' group-name ''
zstyle ':completion:*:descriptions' format '%F{yellow}Completing %B%d%b%f'

### os specific
case "$OSTYPE" in
    cygwin*) source_if_exist ~/.zsh/zshrc.cygwin ;;
    darwin*) source_if_exist ~/.zsh/zshrc.darwin ;;
    freebsd*) source_if_exist ~/.zsh/zshrc.freebsd ;;
    linux*) source_if_exist ~/.zsh/zshrc.linux ;;
esac

typeset -U path PATH

autoload -U compinit && compinit -C -u

if [[ cygwin = "$OSTYPE" ]]; then
    # FIXME: Cygwin is very slowly...
    ZSH="$HOME/.antigen-hs/repos/https-COLON--SLASH--SLASH-github.com-SLASH-robbyrussell-SLASH-oh-my-zsh"
    ZSH_TMUX_AUTOSTART=true
    #plugins=(themes git ssh-agent tmux history urltools brew cabal docker vagrant)

    source $ZSH/plugins/git/git.plugin.zsh
    source $ZSH/plugins/ssh-agent/ssh-agent.plugin.zsh
    source $ZSH/plugins/tmux/tmux.plugin.zsh
    source $ZSH/plugins/urltools/urltools.plugin.zsh
    #source $ZSH/plugins/z/z.plugin.zsh
    source $HOME/.antigen-hs/repos/https-COLON--SLASH--SLASH-github.com-SLASH-m4i-SLASH-cdd/cdd
    autoload -Uz add-zsh-hook
    add-zsh-hook chpwd _cdd_chpwd
else
    if is_executable runghc; then
        source_if_exist ~/.zsh/zshrc.antigen-hs
    else
        source_if_exist ~/.zsh/zshrc.antigen
    fi
    add-zsh-hook chpwd _cdd_chpwd
fi

is_executable aws_zsh_completer.sh && source aws_zsh_completer.sh

bindkey -e
is_exist_func percol_select_history && bindkey '^R' percol_select_history

source_if_exist ~/.zshrc.local

if (which zprof > /dev/null); then
    zprof | less
fi
